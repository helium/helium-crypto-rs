use byteorder::{LittleEndian, ReadBytesExt};
use rsa::{BigUint, RSAPublicKey};
use std::{
    convert::TryFrom,
    io::{Cursor, Read},
};

use thiserror::Error;

#[derive(Debug, Error)]
pub enum Error {
    #[error("Key blob length is to small: {0}")]
    KeyBlobLength(usize),

    #[error("Bad digest padding value: {0}")]
    DigestPadding(u32),

    #[error("Modulus read failed")]
    Modulus,

    #[error("Public exponent read failed")]
    PublicExponent,

    #[error("Private exponent read failed")]
    PrivateExponent,

    #[error("Failed to create RSAPublicKey")]
    RSAPublicKey(#[from] rsa::errors::Error),
}

pub enum DigestPadAlgo {
    RsaDigestPaddingNone = 0,
    RsaPkcs115Sha2_256 = 1,
    RsaPssSha2_256 = 2,
}

impl TryFrom<u32> for DigestPadAlgo {
    type Error = Error;

    fn try_from(value: u32) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(DigestPadAlgo::RsaDigestPaddingNone),
            1 => Ok(DigestPadAlgo::RsaPkcs115Sha2_256),
            2 => Ok(DigestPadAlgo::RsaPssSha2_256),
            _ => Err(Error::DigestPadding(value)),
        }
    }
}

// Note (iegor.s): values are copied from qualcomm qseecom module
const RSA_KEY_SIZE_MAX: usize = 512 + 16;
const RSA_IV_LENGTH: usize = 16;
const RSA_HMAC_LENGTH: usize = 32;
const RSA_KEY_BLOB_LENGHT: usize = 1656;

pub fn parse_key_blob(buf: &[u8]) -> Result<RSAPublicKey, Error> {
    // Key blobs are always exactly RSA_KEY_BLOB_LENGHT long, but
    // let's tolerate extra.
    if buf.len() < RSA_KEY_BLOB_LENGHT {
        return Err(Error::KeyBlobLength(buf.len()));
    }

    let mut data = Cursor::new(buf);
    let _ = data
        .read_u32::<LittleEndian>()
        .expect("expected magic number");
    let _ = data
        .read_u32::<LittleEndian>()
        .expect("expected version number");
    let digest_padding = data
        .read_u32::<LittleEndian>()
        .expect("expected digest padding");
    let _ = DigestPadAlgo::try_from(digest_padding)?;
    let mut modulus = vec![0u8; RSA_KEY_SIZE_MAX];
    data.read_exact(modulus.as_mut_slice())
        .expect("expected modulus");
    let modulus_len = data
        .read_u32::<LittleEndian>()
        .expect("expected modulus length");
    if modulus_len > RSA_KEY_SIZE_MAX as u32 {
        return Err(Error::Modulus);
    }
    modulus.truncate(modulus_len as usize);
    let mut public_exponent = vec![0u8; RSA_KEY_SIZE_MAX];
    data.read_exact(public_exponent.as_mut_slice())
        .expect("expected public exponent");
    let public_exponent_len = data
        .read_u32::<LittleEndian>()
        .expect("expected public exponent length");
    if public_exponent_len > RSA_KEY_SIZE_MAX as u32 {
        return Err(Error::PublicExponent);
    }
    public_exponent.truncate(public_exponent_len as usize);
    let mut iv = vec![0u8; RSA_IV_LENGTH];
    data.read_exact(iv.as_mut_slice())
        .expect("expected initial vector");
    let mut private_exponent = vec![0u8; RSA_KEY_SIZE_MAX];
    data.read_exact(private_exponent.as_mut_slice())
        .expect("expected private exponent");
    let private_exponent_len = data
        .read_u32::<LittleEndian>()
        .expect("expected private exponent length");
    if private_exponent_len > RSA_KEY_SIZE_MAX as u32 {
        return Err(Error::PrivateExponent);
    }
    private_exponent.truncate(private_exponent_len as usize);
    let mut hmac_length = vec![0u8; RSA_HMAC_LENGTH];
    data.read_exact(hmac_length.as_mut_slice())
        .expect("expected hmac length");

    RSAPublicKey::new(
        BigUint::from_bytes_be(modulus.as_slice()),
        BigUint::from_bytes_be(public_exponent.as_slice()),
    )
    .map_err(Error::RSAPublicKey)
}

#[cfg(test)]
mod tests {
    use hex_literal::hex;

    #[test]
    fn verify_parse() {
        const BLOB: &[u8] =
            &hex
        super::parse_key_blob(BLOB).expect("pre-generated keyblob should parse");
    }
}
